package exercise;

/**
 * @Author : Ze Li
 * @Date : 26/07/2025 19:55
 * @Version : V1.0
 * @Description :
 */
public class AddTwoNumbersII445 {
    public static void main(String[] args) {
        Solution solution = new AddTwoNumbersII445().new Solution();
        ListNode l1 = new ListNode(0);
        ListNode l2 = new ListNode(7, new ListNode(3));
        System.out.println(solution.addTwoNumbers(l1, l2));
    }
    class Solution {
        public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
            if (l1 == null) return l2;
            if (l2 == null) return l1;
            l1 = reverseNode(l1);
            l2 = reverseNode(l2);
            int carry = 0;
            int mod = (l1.val + l2.val + carry) % 10;
            carry = (l1.val + l2.val + carry) / 10;
            l1 = l1.next;
            l2 = l2.next;
            ListNode ans = new ListNode(mod);
            ListNode lastNode = ans;
            while (l1 != null && l2 != null) {
                mod = (l1.val + l2.val + carry) % 10;
                carry = (l1.val + l2.val + carry) / 10;
                l1 = l1.next;
                l2 = l2.next;
                ans = new ListNode(mod, lastNode);
                lastNode = ans;
            }
            while (l1 != null || l2 != null || carry != 0) {
                int l1Val = l1 == null? 0 : l1.val;
                int l2Val = l2 == null? 0 : l2.val;
                mod = (l1Val + l2Val + carry) % 10;
                carry = (l1Val + l2Val + carry) / 10;
                l1 = l1 == null ? null : l1.next;
                l2 = l2 == null ? null : l2.next;
                ans = new ListNode(mod, lastNode);
                lastNode = ans;
            }
            return ans;
        }

        private ListNode reverseNode(ListNode l) {
            if (l == null) return null;
            ListNode lastNode = l;
            ListNode temp = l.next;
            l.next = null;
            l = temp;
            while (l != null) {
                temp = l.next;
                l.next = lastNode;
                lastNode = l;
                l = temp;
            }
            return lastNode;
        }
    }
}
